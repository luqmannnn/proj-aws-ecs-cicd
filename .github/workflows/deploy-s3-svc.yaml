name: Deploy Flask S3 App

on:
  push:
    branches:
      - main
    paths:
      - 'flask-s3-service/**'

env:
  ECS_CLUSTER = "proj-aws-ecs-cicd-ecs-cluster"
  ECR_S3_REPO = "proj-aws-ecs-cicd-s3-ecr"
  S3_TASK_DEF = "proj-aws-ecs-cicd-s3-svc"
  S3_ECS_SERVICE = "proj-aws-ecs-cicd-s3-svc"
  S3_CONTAINER_NAME = "proj-aws-ecs-cicd-s3-svc-container"
                                               
jobs:
  get-tag:
    runs-on: ubuntu-latest
    outputs:
      LATEST_TAG: ${{ steps.get_latest_tag.outputs.LATEST_TAG }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Fetch All Tags
        run: git fetch --tags

      - name: Get Latest Tag
        id: get_latest_tag
        run: | 
          echo "LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)" >> "$GITHUB_OUTPUT"
          echo "LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)"

      - name: Output Latest Tag
        run: echo "The latest tag is ${{ steps.get_latest_tag.outputs.LATEST_TAG }}"

  deploy:
    name: Deploy
    needs: get-tag
    runs-on: ubuntu-latest

    steps:
     - name: Checkout
       uses: actions/checkout@v3

     - name: Configure AWS credentials
       uses: aws-actions/configure-aws-credentials@v1
       with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-region: us-east-1

     - name: Login to Amazon ECR
       id: login-ecr
       uses: aws-actions/amazon-ecr-login@v1

     - name: Set up Docker Buildx
       uses: docker/setup-buildx-action@v2

     - name: Build and push Docker image to Amazon ECR
       id: build-image
       uses: docker/build-push-action@v6
       with:
         context: ./flask-s3-service
         push: true
         tags: |
           ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_S3_REPO }}:${{ needs.get-tag.outputs.LATEST_TAG }}
           ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_S3_REPO }}:latest
         platforms: linux/amd64
         provenance: false

     - name: Download task definition
       run: |
         aws ecs describe-task-definition --task-definition ${{ env.S3_TASK_DEF }} --query taskDefinition > task-definition.json

     - name: Fill in the new image ID in the Amazon ECS task definition
       id: task-def
       uses: aws-actions/amazon-ecs-render-task-definition@v1
       with:
         task-definition: task-definition.json
         container-name: ${{ env.S3_CONTAINER_NAME }}
         image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_S3_REPO }}:${{ needs.get-tag.outputs.LATEST_TAG }}

     - name: Deploy Amazon ECS task definition
       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
       with:
         task-definition: ${{ steps.task-def.outputs.task-definition }}
         service: ${{ env.S3_ECS_SERVICE }}
         cluster: ${{ env.ECS_CLUSTER }}
         wait-for-service-stability: true